package iterator;


import bufmgr.PageNotReadException;
import columnar.ColumnarFile;
import diskmgr.Page;
import global.AttrType;
import global.PageId;
import global.RID;
import global.TID;
import heap.*;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

/**
 * open a heapfile and according to the condition expression to get output file, call get_next to
 * get all tuples
 */
public class ColumnarFileScan extends Iterator {

	private AttrType[] _in1;
	private short in1_len;
	private short[] s_sizes;
	private Heapfile f;
	private Scan scan;
	private Tuple tuple1;
	private Tuple Jtuple;
	private int t1_size;
	private int nOutFlds;
	private CondExpr[] OutputFilter;
	public FldSpec[] perm_mat;
	private int[] selectedCols;
	private boolean _fileaccess;
	private String _columnfile;
	private String relname;
	private short string_sizes[];
	int rowpos;
	ColumnarFile cf;

	Iterator delSortIter;


	/**
	 * corowposnstructor
	 *
	 * @param file_name heapfile to be opened
	 * @param in1 array showing what the attributes of the input fields are.
	 * @param s1_sizes shows the length of the string fields.
	 * @param len_in1 number of attributes in the input tuple
	 * @param n_out_flds number of fields in the out tuple
	 * @param proj_list shows what input fields go where in the output tuple
	 * @param outFilter select expressions
	 * @throws IOException some I/O fault
	 * @throws FileScanException exception from this class
	 * @throws TupleUtilsException exception from this class
	 * @throws InvalidRelation invalid relation
	 */
	public ColumnarFileScan(String columnfile,
							String file_name,
							AttrType in1[],
							short s1_sizes[],
							short len_in1,
							int n_out_flds,
							int[] selectedCols,
							FldSpec[] proj_list,
							CondExpr[] outFilter,
							boolean fileScan,
							ColumnarFile cf1
	)
			throws IOException,
			FileScanException,
			TupleUtilsException,
			InvalidRelation {
		_in1 = in1;
		in1_len = len_in1;
		s_sizes = s1_sizes;
		_columnfile = columnfile;
		cf = cf1;
		relname = file_name;
		string_sizes = s1_sizes;

		Jtuple = new Tuple();
		AttrType[] Jtypes = new AttrType[n_out_flds];
		short[] ts_size;
		ts_size = TupleUtils
				.setup_op_tuple(Jtuple, Jtypes, in1, len_in1, s1_sizes, proj_list, n_out_flds);

		OutputFilter = outFilter;
		perm_mat = proj_list;
		nOutFlds = n_out_flds;
		tuple1 = new Tuple();
		this.selectedCols = selectedCols;
		this._fileaccess = fileScan;


		try {
			f = new Heapfile(file_name);
			scan = f.openScan();
		} catch (Exception e) {
			throw new FileScanException(e, "openScan() failed");
		}
	}

	boolean doDelCheck = false;
	private int topDelRecord;

	/**
	 * @return shows what input fields go where in the output tuple
	 */
	public FldSpec[] show() {
		return perm_mat;
	}

	/**
	 * @return the result tuple
	 * @throws JoinsException some join exception
	 * @throws IOException I/O errors
	 * @throws InvalidTupleSizeException invalid tuple size
	 * @throws InvalidTypeException tuple type not valid
	 * @throws PageNotReadException exception from lower layer
	 * @throws PredEvalException exception from PredEval class
	 * @throws UnknowAttrType attribute type unknown
	 * @throws FieldNumberOutOfBoundException array out of bounds
	 * @throws WrongPermat exception for wrong FldSpec argument
	 */
	public Tuple get_next()
			throws Exception {
		RID rid = new RID();
		;

		while (true) {
			if ((tuple1 = scan.getNext(rid)) == null) {
				return null;
			}

			short[] fieldOffset = {0,(short)cf.stringSize,(short)(2*cf.stringSize),(short)(2*cf.stringSize+4)};
			tuple1.setTupleMetaData(cf.tupleLength, (short)cf.numberOfColumns, fieldOffset);

			if (PredEval.Eval(OutputFilter, tuple1, null, _in1, null) == true) {
				//Projection.Project(tuple1, _in1, Jtuple, perm_mat, nOutFlds);

				try {
					Heapfile hf = new Heapfile(relname);
					AttrType[] attrType = cf.attributeType;
					int numOfOutputColumns = selectedCols.length;
					AttrType[] reqAttrType = new AttrType[numOfOutputColumns];
					short[] str_sizes = new short[numOfOutputColumns];
					int j = 0;
					for(int i=0; i<numOfOutputColumns; i++) {
						reqAttrType[i] = attrType[selectedCols[i] - 1];
						if(reqAttrType[i].attrType == AttrType.attrString) {
							str_sizes[j] = s_sizes[selectedCols[i] - 1];
							j++;
						}
					}
					short[] strSizes = Arrays.copyOfRange(str_sizes, 0, j);

					Tuple tuple = new Tuple();
					tuple.setTupleMetaData(cf.tupleLength, (short) selectedCols.length, fieldOffset);

					for(int i=0; i<numOfOutputColumns; i++){
						int indexNumber = selectedCols[i];
						Heapfile heapfile = cf.heapFileColumns[indexNumber-1];
						Tuple tupleTemp = getTupleFromPosition(rowpos, heapfile);
						tupleTemp.setTupleMetaData(cf.tupleLength, (short) numOfOutputColumns, fieldOffset);
						if(attrType[indexNumber-1].attrType == AttrType.attrString) {
							tuple.setStrFld(i+1, tupleTemp.getStrFld(1));
						}else if(attrType[indexNumber-1].attrType == AttrType.attrInteger) {
							tuple.setIntFld(i+1, tupleTemp.getIntFld(1));
						}else if(attrType[indexNumber-1].attrType == AttrType.attrReal) {
							tuple.setFloFld(i+1, tupleTemp.getFloFld(1));
						}
					}
					rowpos++;
					return tuple;
				} catch (Exception e) {
					System.out.println("Failed");
					e.printStackTrace();
				}
			}
			rowpos++;
		}
	}


	public TID get_all_rid_as_tid()
			throws Exception {
		RID rid = new RID();
		;

		while (true) {
			if ((tuple1 = scan.getNext(rid)) == null) {
				return null;
			}

			short[] fieldOffset = {0,(short)cf.stringSize,(short)(2*cf.stringSize),(short)(2*cf.stringSize+4)};
			tuple1.setTupleMetaData(cf.tupleLength, (short)cf.numberOfColumns, fieldOffset);

			if (PredEval.Eval(OutputFilter, tuple1, null, _in1, null) == true) {
				//Projection.Project(tuple1, _in1, Jtuple, perm_mat, nOutFlds);

				try {

					TID tid = new TID();
					tid.recordIDs = new RID[cf.numberOfColumns];
					for(int j =0 ; j < cf.numberOfColumns ; j++)
						tid.recordIDs[j] = new RID();
					RID rid1 = new RID();
					for(int i=0; i<cf.numberOfColumns; i++){
						Heapfile heapfile = cf.getHeapFileColumns()[i];
						rid1 = getRIDFromPosition(rowpos, heapfile);
						tid.recordIDs[i] = rid1;
					}
					rowpos++;
					return tid;
				} catch (Exception e) {
					System.out.println("Failed");
					e.printStackTrace();
				}
			}
			rowpos++;
		}
	}

	public static RID getRIDFromPosition(int position, Heapfile hf) throws HFBufMgrException, IOException, InvalidSlotNumberException, InvalidTupleSizeException {
		int curcount = position;
		PageId currentDirPageId = new PageId(hf._firstDirPageId.pid);
		HFPage currentDirPage = new HFPage();
		PageId nextDirPageId = new PageId(0);

		Page pageinbuffer = new Page();

		boolean flag = true;

		RID recid = new RID();
		DataPageInfo dpinfo = new DataPageInfo();
		while (currentDirPageId.pid != hf.INVALID_PAGE && flag) {
			hf.pinPage(currentDirPageId, currentDirPage, false);

			Tuple atuple;
			for (recid = currentDirPage.firstRecord();
				 recid != null;
				 recid = currentDirPage.nextRecord(recid)) {
				atuple = currentDirPage.getRecord(recid);
				dpinfo = new DataPageInfo(atuple);

				if (curcount - dpinfo.recct >= 0) {
					curcount -= dpinfo.recct;
				} else if(curcount==0){
					flag = false;
					break;
				}else {
					flag = false;
					break;
				}
			}

			// ASSERTIONS: no more record
			// - we have read all datapage records on
			//   the current directory page.

			if (flag) {
				nextDirPageId = currentDirPage.getNextPage();
				hf.unpinPage(currentDirPageId, false /*undirty*/);
				currentDirPageId.pid = nextDirPageId.pid;
			}
		}
		//recid points to data page with the position

		HFPage currentDataPage = new HFPage();
		PageId currentDataPageId = new PageId(dpinfo.getPageId().pid);
		hf.pinPage(currentDataPageId, currentDataPage, false/*Rdisk*/);

		RID record = new RID();
		for (record = currentDataPage.firstRecord();
			 record != null && curcount>0;  // rid==NULL means no more record
			 record = currentDataPage.nextRecord(record)) {
			curcount--;
		}
		hf.unpinPage(currentDataPageId, false);

		return record;
	}




	public static Tuple getTupleFromPosition(int position, Heapfile hf) throws HFBufMgrException, IOException, InvalidSlotNumberException, InvalidTupleSizeException {
		int curcount = position;
		PageId currentDirPageId = new PageId(hf._firstDirPageId.pid);
		HFPage currentDirPage = new HFPage();
		PageId nextDirPageId = new PageId(0);

		Page pageinbuffer = new Page();

		boolean flag = true;
		DataPageInfo dpinfo = null;

		RID recid = new RID();
		while (currentDirPageId.pid != hf.INVALID_PAGE && flag) {
			hf.pinPage(currentDirPageId, currentDirPage, false);

			Tuple atuple;
			for (recid = currentDirPage.firstRecord();
				 recid != null;
				 recid = currentDirPage.nextRecord(recid)) {
				atuple = currentDirPage.getRecord(recid);
				dpinfo = new DataPageInfo(atuple);

				if (curcount - dpinfo.recct > 0) {
					curcount -= dpinfo.recct;
				} else {
					flag = false;
					break;
				}
			}

			// ASSERTIONS: no more record
			// - we have read all datapage records on
			//   the current directory page.

			if (flag) {
				nextDirPageId = currentDirPage.getNextPage();
				hf.unpinPage(currentDirPageId, false /*undirty*/);
				currentDirPageId.pid = nextDirPageId.pid;
			}
		}


		HFPage currentDataPage = new HFPage();
		PageId currentDataPageId = dpinfo.getPageId();
		hf.pinPage(currentDataPageId, currentDataPage, false/*Rdisk*/);


		Tuple nextTuple = new Tuple();
		for (recid = currentDataPage.firstRecord();
			 recid != null && curcount>=0;  // rid==NULL means no more record
			 recid = currentDataPage.nextRecord(recid)) {
			nextTuple = currentDataPage.getRecord(recid);
			curcount--;
		}
		try {
			//TODO: Remove the try catch block
			hf.unpinPage(currentDataPageId, false/*Rdisk*/);
		}
		catch (Exception ex)
		{
			System.out.println("Exception in getTupleFromPosition() - unpin");
			ex.printStackTrace();
		}
		return nextTuple;
	}


	/**
	 * implement the abstract method close() from super class Iterator to finish cleaning up
	 */
	public void close() {

		if (!closeFlag) {
			scan.closescan();
			closeFlag = true;
		}
	}

}


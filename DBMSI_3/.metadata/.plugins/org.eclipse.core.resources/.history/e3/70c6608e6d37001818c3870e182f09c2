package programs;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.StringTokenizer;

import bitmap.BM;
import bitmap.BitMapFile;
import btree.BT;
import btree.BTFileScan;
import btree.BTreeFile;
import btree.IntegerKey;
import btree.KeyDataEntry;
import btree.StringKey;
import bufmgr.BufMgrException;
import bufmgr.HashOperationException;
import bufmgr.PageNotFoundException;
import bufmgr.PagePinnedException;
import bufmgr.PageUnpinnedException;
import columnar.ColumnarFile;
import columnar.ColumnarFileMetadata;
import columnar.TupleScan;
import diskmgr.PCounter;
import global.AttrOperator;
import global.AttrType;
import global.Convert;
import global.RID;
import global.SystemDefs;
import global.TID;
import heap.HFBufMgrException;
import heap.HFDiskMgrException;
import heap.HFException;
import heap.HFPage;
import heap.Heapfile;
import heap.InvalidSlotNumberException;
import heap.Scan;
import heap.Tuple;
import iterator.ColumnarFileScan;
import iterator.CondExpr;
import iterator.FileScan;
import iterator.FldSpec;
import iterator.RelSpec;
import value.IntegerValue;
import value.StringValue;

public class Main {

	public static String filePath = "C:/Users/Ashish/ASU Backup/ASU Grad School/Semester 2 (Spring 2018)/Courses/DBMSI/Phase_2/";

	public static Scanner scanner = new Scanner(System.in);

	public static List<String> bitmapIndex = new ArrayList<String>(); 


	public static void main(String[] args) {

		// Input parameters data file name, column DB name, columnar filename, number of columns
		String dataFileName = args[0];
		String columnDbName = args[1];
		String columnarFileName = args[2];
		int numberOfColumns = Integer.parseInt(args[3]);
		String columnName;
		String indexType;

		ColumnarFile cf = null;
		BTreeFile btf = null; 

		String queryInput = null;
		String DBName ="";
		String filename ="";
		String targetColumns ="";
		List<String> targetColumnNames = new ArrayList<String>();
		List<String> valConstraint;
		int numBuf = 0;
		String accessType ="";
		String[] input = null;
		String[] colArray = null;
		BufferedReader in;

		String cName;
		String operator;
		String colVal;

		try {
			// Declare variable for user's option and defaulting to 0
			int menuOption = 0;
			do {
				// Setting menuOption equal to return value from showMenu();
				menuOption = showMenu();

				// Switching on the value given from user
				switch (menuOption) {

				case 1:
					cf = batchInsert(dataFileName, columnDbName, columnarFileName, numberOfColumns);
					break;
				case 2:

					System.out.println("Enter column name for index: ");
					columnName = scanner.next();

					bitmapIndex.add(columnName);

					System.out.println("Enter type of index: ");
					indexType = scanner.next();

					if(indexType.equalsIgnoreCase("BTREE")) {
						btf = indexQueryBTree(cf, columnDbName, columnarFileName, columnName, indexType);
						BT.printBTree(btf.getHeaderPage());
						BT.printAllLeafPages(btf.getHeaderPage());
						System.out.println("Successfully created BTree index !!!");
					} else if(indexType.equalsIgnoreCase("BITMAP")) {
						indexQueryBitmap(cf, columnDbName, columnarFileName, columnName, indexType);
					}
					break;
				case 3:
					targetColumns ="";
					targetColumnNames = new ArrayList<String>();
					valConstraint = new ArrayList<String>();

					System.out.println("\nEnter the query in this format (query COLUMNDBNAME COLUMNARFILENAME [TARGETCOLUMNNAMES] VALUECONSTRAINT NUMBUF ACCESSTYPE)");
					in = new BufferedReader(new InputStreamReader(System.in));
					try {
						queryInput = in.readLine();
					} catch (IOException e) {
						e.printStackTrace();
					}
					input = queryInput.split("\\s+");
					DBName = input[1];
					filename = input[2];
					targetColumns = input[3];
					targetColumns = targetColumns.replaceAll("\\[", "").replaceAll("\\]","");
					colArray = targetColumns.split(",");
					if(colArray.length > 0 && colArray != null) {
						for(String col : colArray) {
							targetColumnNames.add(col);
						}
					}

					cName = input[4];
					operator = input[5];
					colVal = input[6];

					valConstraint.add(cName);
					valConstraint.add(operator);
					valConstraint.add(colVal);

					if(input[7].contains("-"))
						numBuf = 0;
					else
						numBuf = Integer.parseInt(input[7]);

					if(input[8].contains("-"))
						accessType = null;
					else
						accessType = input[8];

					System.out.println(accessType);
					System.out.println(targetColumnNames);
					runQuery(DBName, cf, filename, targetColumnNames,  valConstraint , numBuf, accessType);
					break;

				case 4:
					//targetColumns ="";
					//targetColumnNames = new ArrayList<String>();
					valConstraint = new ArrayList<String>();
					System.out.println("\nEnter the query in this format (query COLUMNDBNAME COLUMNARFILENAME VALUECONSTRAINT NUMBUF ACCESSTYPE)");
					in = new BufferedReader(new InputStreamReader(System.in));
					try {
						queryInput = in.readLine();
					} catch (IOException e) {
						e.printStackTrace();
					}
					input = queryInput.split("\\s+");
					DBName = input[1];
					filename = input[2];
					//targetColumns = input[3];
					//targetColumns = targetColumns.replaceAll("\\[", "").replaceAll("\\]","");
					//String[] colArray1 = targetColumns.split(",");
					/*if(colArray1.length > 0 && colArray1 != null)
					{
						for(String col : colArray1)
						{
							targetColumnNames.add(col);
						}
					}*/

					cName = input[3];
					operator = input[4];
					colVal = input[5];

					valConstraint.add(cName);
					valConstraint.add(operator);
					valConstraint.add(colVal);

					numBuf = Integer.parseInt(input[6]);

					accessType = input[7];

					System.out.println(accessType);
					System.out.println(targetColumnNames);
					deleteQuery(DBName, cf, filename,  valConstraint , numBuf, accessType);
					break;

				case 5:
					System.out.println("Exiting Columnar Minibase !!!");
					break;
				default:
					System.out.println("Sorry, please enter valid Option !!!");

				}

			} while (menuOption != 5);

			System.out.println("Thanks for using Columnar Minibase !!!");

		} catch (Exception ex) {
			ex.printStackTrace();
			System.out.println("Sorry problem occured !!!");
			scanner.next();
		} finally {
			scanner.close();
		}

	}

	// Menu
	public static int showMenu() {

		int option = 0;

		// Printing menu to screen
		System.out.println("CSE 510: Columnar Minibase");
		System.out.println("-------------------------------------------");
		System.out.println("Menu:");
		System.out.println("1. Batch Insert Program");
		System.out.println("2. Index Program");
		System.out.println("3. Query Program");
		System.out.println("4. Delete Query Program");
		System.out.println("5. Quit Program");
		System.out.println();
		// Getting user option from above menu
		System.out.print("Enter Option from above: ");
		option = scanner.nextInt();
		return option;

	}

	// Batch insert
	public static ColumnarFile batchInsert(String dataFileName, String columnDbName, 
			String columnarFileName, int numberOfColumn) {


		ColumnarFile cf = null;
		// Parameters initialized
		String[] columnNames = new String[numberOfColumn];
		AttrType[] columnTypes = new AttrType[numberOfColumn];

		int i = 0;
		int tupleLength = 0;
		int stringSize = 0;
		int startread, startwrite;

		@SuppressWarnings("unused")
		SystemDefs sysDef = new SystemDefs(columnDbName,100000,100,"Clock");

		FileInputStream fin;
		try {
			fin = new FileInputStream(filePath+dataFileName);
			DataInputStream din = new DataInputStream(fin);
			BufferedReader bin = new BufferedReader(new InputStreamReader(din));

			startread = PCounter.rcounter;
			startwrite = PCounter.wcounter;

			String line = bin.readLine();

			StringTokenizer st = new StringTokenizer(line);

			while(st.hasMoreTokens()) {

				String token = st.nextToken();
				StringTokenizer svalue = new StringTokenizer(token);

				String value1 = svalue.nextToken(":");
				String value2 = svalue.nextToken(":");

				//System.out.println(value1 + " " + value2);

				columnNames[i] = value1;

				if (value2.equals("int")) {
					columnTypes[i] = new AttrType(AttrType.attrInteger);
					tupleLength = tupleLength + 4;
				} else {
					columnTypes[i] = new AttrType(AttrType.attrString);				
					StringTokenizer t1 = new StringTokenizer(value2);

					t1.nextToken("(");
					String temp = t1.nextToken("(");
					t1 = new StringTokenizer(temp);
					temp = t1.nextToken(")");
					stringSize = Integer.parseInt(temp);
					tupleLength = tupleLength + stringSize;
				}
				i++;
			} 

			cf = new ColumnarFile (columnarFileName, numberOfColumn, columnTypes, stringSize);
			cf.columnNames = columnNames;
			cf.setColumnarFileMetadata(stringSize);

			byte [] tupleData = new byte[tupleLength];
			int offset = 0;
			int count = 1;

			while((line = bin.readLine()) != null) {

				StringTokenizer columnValue = new StringTokenizer (line);

				for(AttrType columnType: columnTypes){
					String column = columnValue.nextToken();
					if(columnType.attrType == AttrType.attrInteger) {
						Convert.setIntValue(Integer.parseInt(column), offset, tupleData);
						offset = offset + 4;
					}
					else if (columnType.attrType == AttrType.attrString){
						Convert.setStrValue(column, offset, tupleData);
						offset = offset + stringSize;
					}
				}	
				cf.insertTuple(tupleData);
				System.out.println("Record Inserted: "+ count);
				offset = 0;
				count++;
				Arrays.fill(tupleData, (byte)0);

			}
			System.out.println();
			System.out.println("Successfully inserted all the records !!");		
			System.out.println("Number of disk reads: " + (PCounter.rcounter-startread));
			System.out.println("Number of disk writes: " + (PCounter.wcounter-startwrite));

			System.out.println();

			TupleScan tscan = new TupleScan(cf);
			TID tid = new TID();
			tid.recordIDs = new RID[numberOfColumn];

			Tuple tuple = new Tuple();
			short[] fieldOffset = {0,(short)cf.stringSize,(short)(2*cf.stringSize),(short)(2*cf.stringSize+4)};
			tuple.setTupleMetaData(tupleLength, (short)numberOfColumn, fieldOffset);

			for (i = 0; i < numberOfColumn; i++) {
				tid.recordIDs[i] = new RID();
			}

			while((tuple = tscan.getNext(tid)) != null) {
				System.out.print("Record Fetched: ");
				tuple.print(columnTypes);
			}
			System.out.println();
			System.out.println("Successfully fetched all the records !!");

			System.out.println("Number of disk reads: " + (PCounter.rcounter-startread));
			System.out.println("Number of disk writes: " + (PCounter.wcounter-startwrite));

			tscan.closetuplescan();	
			bin.close();

			


		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		
		try {
			SystemDefs.JavabaseBM.resetAllPinCount();
			SystemDefs.JavabaseBM.flushAllPages();
			//SystemDefs.JavabaseDB.closeDB();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return cf;

	}

	public static void indexQueryBitmap(ColumnarFile cf, String columnDbName, 
			String columnarFileName, String columnName, String indexType) {

		BitMapFile B = null; 

		String[] columnNames;
		String file_entry_name;

		ColumnarFileMetadata cfm = cf.getColumnarFileMetadata(columnarFileName+".hdr");
		columnNames = cfm.columnNames;
		cf.columnNames = columnNames;

		int startread, startwrite;
		startread = PCounter.rcounter;
		startwrite = PCounter.wcounter;

		Heapfile hf = cf.getHeapfileForColumname(columnName);

		if(indexType.equalsIgnoreCase("BITMAP")) {
			try {
				int value;
				String str;
				RID rid = new RID();
				Scan s = hf.openScan();
				Tuple tuple=null;
				System.out.println("Creating BitMap on column: "+columnName);
				int ColNo = cf.getColumnNumberFromColumname(columnName);
				AttrType x = cf.attributeType[ColNo];	

				HashSet<Integer> intHash = new HashSet<>();
				HashSet<String> strHash = new HashSet<>();

				while((tuple=s.getNext(rid))!=null){

					if(x.attrType == AttrType.attrInteger) {
						value = Convert.getIntValue(0, tuple.getData());

						if (!intHash.contains(value)) {
							IntegerValue val = new IntegerValue();
							val.setValue(value);
							intHash.add(value);
							file_entry_name= columnarFileName+Integer.toString(ColNo)+Integer.toString(value);
							//System.out.println(file_entry_name);
							System.out.println("Creating index on: " + value);
							B = new BitMapFile(file_entry_name,cf,ColNo,val);
							//BM.printBitMap(B.getHeaderPage());
						}

					}	
					else if(x.attrType == AttrType.attrString)	{
						str = Convert.getStrValue(0, tuple.getData(),cf.stringSize );					 

						if (!strHash.contains(str)) {
							StringValue vals = new StringValue();
							vals.setValue(str);
							strHash.add(str);
							file_entry_name= columnarFileName+Integer.toString(ColNo)+str;
							//System.out.println(file_entry_name);
							System.out.println("Creating index on: " + str);
							B = new BitMapFile(file_entry_name,cf,ColNo,vals);
							//BM.printBitMap(B.getHeaderPage());
						}
					}

				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			System.out.println("Number of disk reads: " + (PCounter.rcounter-startread));
			System.out.println("Number of disk writes: " + (PCounter.wcounter-startwrite));
		}

	}

	public static BTreeFile indexQueryBTree(ColumnarFile cf, String columnDbName, 
			String columnarFileName, String columnName, String indexType) {

		BTreeFile bTreeFile = null; 

		int startread = 0, startwrite = 0;

		String[] columnNames;

		ColumnarFileMetadata cfm = cf.getColumnarFileMetadata(columnarFileName+".hdr");
		columnNames = cfm.columnNames;
		cf.columnNames = columnNames;

		int colNo = cf.getColumnNumberFromColumname(columnName);
		int type = cf.attributeType[colNo].attrType;

		Heapfile hf = cf.getHeapfileForColumname(columnName);

		if(indexType.equalsIgnoreCase("BTREE")) {
			try {

				startread = PCounter.rcounter;
				startwrite = PCounter.wcounter;

				RID rid = new RID();
				Scan s = hf.openScan();
				Tuple tuple=null;
				System.out.println("Creating BTree on column: "+columnName);
				if (type == 1) {
					bTreeFile = new BTreeFile("btree"+columnName, AttrType.attrInteger, 4, 1);
					while((tuple=s.getNext(rid))!=null){
						int temp=Convert.getIntValue(0, tuple.getData());
						bTreeFile.insert(new btree.IntegerKey(temp), rid);
					}
				}

				else {
					bTreeFile = new BTreeFile("btree"+columnName, AttrType.attrString, 25, 1);
					while((tuple=s.getNext(rid))!=null){
						String temp=Convert.getStrValue(0, tuple.getData(), 25);
						bTreeFile.insert(new btree.StringKey(temp), rid);
					}
				}


			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		System.out.println("Number of disk reads: " + (PCounter.rcounter-startread));
		System.out.println("Number of disk writes: " + (PCounter.wcounter-startwrite));

		try {
			SystemDefs.JavabaseBM.resetAllPinCount();
			SystemDefs.JavabaseBM.flushAllPages();
			//SystemDefs.JavabaseDB.closeDB();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return bTreeFile;
	}

	public static void runQuery(String columnDBName, ColumnarFile cf, String columnFileName,
			List<String> columnNames, List<String> valueConstraint, int numBuf, String accessType) {

		try {

			int selectCols[] = new int[columnNames.size()];
			for (int i = 0; i < columnNames.size(); i++) {
				selectCols[i] = getColumnNumber(columnNames.get(i));
			}

			List<String> result = new ArrayList<String>();
			int targetsize = columnNames.size();
			int targetColNo;
			switch(accessType) {

			case "BITMAP":

				int colNo = getColumnNumber(valueConstraint.get(0))-1;
				String val = valueConstraint.get(2);
				String file_entry_name = columnFileName+ Integer.toString(colNo)+val;
				BM BitMap = new BM();
				BitMapFile B = new BitMapFile(file_entry_name);
				int[] positions = BM.getpositions(B.getHeaderPage());
				int size = BM.getCount();				
				for(int i=0;i<size;i++) { 
					//System.out.println("position: "+positions[i]);
					for(int j=0;j<targetsize;j++) {
						targetColNo = getColumnNumber(columnNames.get(j))-1;
						AttrType x = cf.attributeType[targetColNo];	
						if(x.attrType==AttrType.attrInteger)
							System.out.print(HFPage.getIntvalue_forGivenPosition(positions[i],targetColNo , cf));
						else if (x.attrType==AttrType.attrString) 
							System.out.print(HFPage.getStrvalue_forGivenPosition(positions[i],targetColNo , cf));
						System.out.print("  ");
					}
					System.out.println();
				}
				System.out.println("End of Bitmap query");
				break;

			case "FILESCAN":
				try
				{
					TupleScan ts = new TupleScan(cf);
					Tuple t = new Tuple();

					short[] fieldOffset = {0,(short)cf.stringSize,(short)(2*cf.stringSize),(short)(2*cf.stringSize+4)};
					t.setTupleMetaData(cf.tupleLength, (short)cf.numberOfColumns, fieldOffset);

					TID tid = new TID();
					tid.recordIDs = new RID[cf.numberOfColumns];
					for(int j =0 ; j < cf.numberOfColumns ; j++)
						tid.recordIDs[j] = new RID();

					int columnNumber = cf.getColumnNumberFromColumname(valueConstraint.get(0));
					int type = cf.attributeType[columnNumber].attrType;
					int lowkeyInt=0;
					String lowkeyStr="";
					if(type == 1) {						
						lowkeyInt= Integer.parseInt(valueConstraint.get(2));
					} else {
						lowkeyStr = valueConstraint.get(2);
					}

					char operator = valueConstraint.get(1).charAt(0);

					AttrType[] columnType = cf.attributeType;
					result = new ArrayList<String>();
					while ((t=ts.getNext(tid))!=null) {
						if (type == 1) {
							switch(operator)
							{
							case '>':
								if ( lowkeyInt < (t.getIntFld(columnNumber+1))) {
									result = t.getRecord(columnType);
									for(int j=0;j<targetsize;j++) {
										targetColNo = getColumnNumber(columnNames.get(j))-1;
										System.out.print(result.get(targetColNo) + "      ");
									}
									System.out.println();
								}
								break;
							case '<':
								if (lowkeyInt > (t.getIntFld(columnNumber+1))) {
									result = t.getRecord(columnType);
									for(int j=0;j<targetsize;j++) {
										targetColNo = getColumnNumber(columnNames.get(j))-1;
										System.out.print(result.get(targetColNo) + "      ");
									}
									System.out.println();
								}
								break;
							case '!':
								if (!(lowkeyInt == (t.getIntFld(columnNumber+1)))) {
									result = t.getRecord(columnType);
									for(int j=0;j<targetsize;j++) {
										targetColNo = getColumnNumber(columnNames.get(j))-1;
										System.out.print(result.get(targetColNo) + "      ");
									}
									System.out.println();
								}
								break;
							case '=':
								if (lowkeyInt == (t.getIntFld(columnNumber+1))) {
									result = t.getRecord(columnType);
									for(int j=0;j<targetsize;j++) {
										targetColNo = getColumnNumber(columnNames.get(j))-1;
										System.out.print(result.get(targetColNo) + "      ");
									}
									System.out.println();
								}
								break;

							}
						} else {
							switch(operator)
							{
							case '>':
								if ((lowkeyStr.compareTo(t.getStrFld(columnNumber+1)) < 0)) {
									result = t.getRecord(columnType);
									for(int j=0;j<targetsize;j++) {
										targetColNo = getColumnNumber(columnNames.get(j))-1;
										System.out.print(result.get(targetColNo) + "      ");
									}
									System.out.println();
								}
								break;
							case '<':
								if ((lowkeyStr.compareTo(t.getStrFld(columnNumber+1)) > 0)) {
									result = t.getRecord(columnType);
									for(int j=0;j<targetsize;j++) {
										targetColNo = getColumnNumber(columnNames.get(j))-1;
										System.out.print(result.get(targetColNo) + "      ");
									}
									System.out.println();
								}
								break;
							case '!':
								if (!(lowkeyStr.compareTo(t.getStrFld(columnNumber+1)) == 0)) {
									result = t.getRecord(columnType);
									for(int j=0;j<targetsize;j++) {
										targetColNo = getColumnNumber(columnNames.get(j))-1;
										System.out.print(result.get(targetColNo) + "      ");
									}
									System.out.println();
								}
								break;
							case '=':
								if ((lowkeyStr.compareTo(t.getStrFld(columnNumber+1)) == 0)) {
									result = t.getRecord(columnType);
									for(int j=0;j<targetsize;j++) {
										targetColNo = getColumnNumber(columnNames.get(j))-1;
										System.out.print(result.get(targetColNo) + "      ");
									}
									System.out.println();
								}
								break;

							}

						}		
					}
				}

				//System.out.println("Disk Reads"+ (pcounter.rcounter-startRead));
				//System.out.println("Disk Writes"+ (pcounter.wcounter-startWrite));

				catch (Exception e) {
					e.printStackTrace();
				}

				break;

			case "COLUMNSCAN":

				//query COLUMNDBNAME COLUMNARFILENAME [TARGETCOLUMNNAMES] VALUECONSTRAINT NUMBUF ACCESSTYPE
				ColumnarFile columnarFile = cf;
				int numOfColumns = columnarFile.numberOfColumns;
				AttrType[] types = columnarFile.attributeType;

				AttrType[] attrs = new AttrType[1];
				int columnNumber = getColumnNumber(valueConstraint.get(0)) - 1;
				attrs[0] = types[columnNumber];

				FldSpec[] projlist = new FldSpec[1];
				RelSpec rel = new RelSpec(RelSpec.outer);
				projlist[0] = new FldSpec(rel, 1);

				String filename = columnFileName + String.valueOf(columnNumber);

				short[] strSize = new short[numOfColumns];
				int j = 0;
				for (int i = 0; i < numOfColumns; i++) {
					if (types[i].attrType == AttrType.attrString) {
						strSize[j] = (short) 100;
						j++;
					}
				}
				short[] strSizes = Arrays.copyOfRange(strSize, 0, j);

				CondExpr[] expr = getValueContraint(valueConstraint);
				int selectedCols[] = new int[columnNames.size()];
				for (int i = 0; i < columnNames.size(); i++) {
					selectedCols[i] = getColumnNumber(columnNames.get(i));
				}

				//int startread = PCounter.rcounter;
				//int startwrite = PCounter.wcounter;

				try {

					ColumnarFileScan columnarFileScan = new ColumnarFileScan(columnFileName, filename, attrs,
							strSizes, (short) 1, 1, selectedCols, projlist, expr, false, cf);
					Tuple tuple = new Tuple();
					short[] fieldOffset = {0,(short)cf.stringSize,(short)(2*cf.stringSize),(short)(2*cf.stringSize+4)};
					tuple.setTupleMetaData(cf.tupleLength, (short)cf.numberOfColumns, fieldOffset);

					while (true) {
						tuple = columnarFileScan.get_next();
						if (tuple == null) {
							break;
						}
						for (int i = 0; i < tuple.noOfFlds(); i++) {
							if (types[selectCols[i] - 1].attrType == AttrType.attrString) {
								System.out.println(tuple.getStrFld(i + 1));
							}
							if (types[selectCols[i] - 1].attrType == AttrType.attrInteger) {
								System.out.println(tuple.getIntFld(i + 1));
							}
							if (types[selectCols[i] - 1].attrType == AttrType.attrReal) {
								System.out.println(tuple.getFloFld(i + 1));
							}
						}
						System.out.println("");
					}
					columnarFileScan.close();
				} catch (Exception e) {
					e.printStackTrace();
				}

				//System.out.println("Number of disk reads: " + (PCounter.rcounter-startread));
				//System.out.println("Number of disk writes: " + (PCounter.wcounter-startwrite));

				break;

			case "BTREE":

				BTreeFile btf = null;
				BTFileScan scan = null;

				String indexColumn = valueConstraint.get(0);
				Heapfile reqHFile=cf.getHeapfileForColumname(indexColumn);

				char operator = valueConstraint.get(1).charAt(0);

				columnNumber = cf.getColumnNumberFromColumname(valueConstraint.get(0));
				int type = cf.attributeType[columnNumber].attrType;
				int lowkeyInt=0, hikeyInt=0;
				String lowkeyStr="", highKeyStr = "";

				if(type == 1) {						
					if (operator == '<') {
						hikeyInt= Integer.parseInt(valueConstraint.get(2));
						lowkeyInt = 0;
					} else {
						lowkeyInt= Integer.parseInt(valueConstraint.get(2));
						hikeyInt = 999999;
					}						
					IntegerKey lowkey=new IntegerKey(lowkeyInt);
					IntegerKey hikey=new IntegerKey(hikeyInt);
					btf = new BTreeFile("btree"+indexColumn, AttrType.attrInteger, 4, 1);
					scan= btf.new_scan(lowkey, hikey);
				} else {	
					if (operator == '<') {
						highKeyStr = valueConstraint.get(2);
						lowkeyStr = "Connecticut";
					} else {
						lowkeyStr = valueConstraint.get(2);
						highKeyStr = "West_Virginia";
					}						

					StringKey lowKey = new StringKey(lowkeyStr);
					StringKey highKey = new StringKey(highKeyStr);
					btf = new BTreeFile("btree"+indexColumn, AttrType.attrString, 25, 1);
					scan= btf.new_scan(lowKey, highKey);					
				}

				KeyDataEntry entry;
				RID rid=new RID();

				try 
				{	
					result = new ArrayList<String>();
					while((entry=scan.get_next())!=null) {
						if(entry!=null) {
							switch(operator)
							{
							case '>':
								if(entry.key instanceof IntegerKey) {
									if(((IntegerKey)entry.key).getKey() > lowkeyInt) {
										rid=((btree.LeafData)entry.data).getData();
										int position=reqHFile.RidToPos(rid);										
										result = getResult(cf, position);
										for(j=0;j<targetsize;j++) {
											targetColNo = getColumnNumber(columnNames.get(j))-1;
											System.out.print(result.get(targetColNo) + "      ");
										}
										System.out.println();
									}
								}

								else {
									if(((StringKey)entry.key).getKey().compareTo(lowkeyStr)>0){
										rid=((btree.LeafData)entry.data).getData();
										int position=reqHFile.RidToPos(rid);										
										result = getResult(cf, position);
										for(j=0;j<targetsize;j++) {
											targetColNo = getColumnNumber(columnNames.get(j))-1;
											System.out.print(result.get(targetColNo) + "      ");
										}
										System.out.println();
									}
								}								
								break;
							case '<':
								if(entry.key instanceof IntegerKey)	{
									if(((IntegerKey)entry.key).getKey() < hikeyInt){
										rid=((btree.LeafData)entry.data).getData();
										int position=reqHFile.RidToPos(rid);										
										result = getResult(cf, position);
										for(j=0;j<targetsize;j++) {
											targetColNo = getColumnNumber(columnNames.get(j))-1;
											System.out.print(result.get(targetColNo) + "      ");
										}
										System.out.println();
									}
								}
								else {
									if(((StringKey)entry.key).getKey().compareTo(highKeyStr)<0){
										rid=((btree.LeafData)entry.data).getData();
										int position=reqHFile.RidToPos(rid);										
										result = getResult(cf, position);
										for(j=0;j<targetsize;j++) {
											targetColNo = getColumnNumber(columnNames.get(j))-1;
											System.out.print(result.get(targetColNo) + "      ");
										}
										System.out.println();
									}
								}
								break;

							case '=':
								if(entry.key instanceof IntegerKey) {
									if(((IntegerKey)entry.key).getKey() == lowkeyInt){
										rid=((btree.LeafData)entry.data).getData();
										int position=reqHFile.RidToPos(rid);										
										result = getResult(cf, position);
										for(j=0;j<targetsize;j++) {
											targetColNo = getColumnNumber(columnNames.get(j))-1;
											System.out.print(result.get(targetColNo) + "      ");
										}
										System.out.println();
									}
								}
								else {
									if(((StringKey)entry.key).getKey().compareTo(lowkeyStr)==0){
										rid=((btree.LeafData)entry.data).getData();
										int position=reqHFile.RidToPos(rid);										
										result = getResult(cf, position);
										for(j=0;j<targetsize;j++) {
											targetColNo = getColumnNumber(columnNames.get(j))-1;
											System.out.print(result.get(targetColNo) + "      ");
										}
										System.out.println();
									}
								}
								break;
							}
						}
					}
					System.out.println("AT THE END OF SCAN!");
					//System.out.println("Disk Reads"+ (pcounter.rcounter - startRead));
					//System.out.println("Disk Writes"+ (pcounter.wcounter - startWrite));
				} catch (Exception e) 
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				break;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static void deleteQuery(String columnDBName, ColumnarFile cf, String columnFileName,
			List<String> valueConstraint, int numBuf, String accessType) {

		try {

			TupleScan ts = new TupleScan(cf);
			Tuple t = new Tuple();

			short[] fieldOffset = {0,(short)cf.stringSize,(short)(2*cf.stringSize),(short)(2*cf.stringSize+4)};
			t.setTupleMetaData(cf.tupleLength, (short)cf.numberOfColumns, fieldOffset);


			TID tid = new TID();
			tid.recordIDs = new RID[cf.numberOfColumns];
			for(int j =0 ; j < cf.numberOfColumns ; j++)
				tid.recordIDs[j] = new RID();

			int columnNumber = cf.getColumnNumberFromColumname(valueConstraint.get(0));
			int type = cf.attributeType[columnNumber].attrType;
			int lowkeyInt=0, hikeyInt=0;
			String lowkeyStr="", highKeyStr = "";

			if(type == 1) {						
				lowkeyInt= Integer.parseInt(valueConstraint.get(2));
			} else {
				lowkeyStr = valueConstraint.get(2);
			}

			char operator = valueConstraint.get(1).charAt(0);

			switch(accessType) {

			case "FILESCAN":
				try
				{
					while ((t=ts.getNext(tid))!=null) {
						if (type == 1) {
							switch(operator)
							{
							case '=':
								if (lowkeyInt == (t.getIntFld(columnNumber+1))) {
									System.out.println(cf.markTupleDeleted(tid));
								}
								break;

							}
						} else {
							switch(operator)
							{
							case '=':
								if ((lowkeyStr.compareTo(t.getStrFld(columnNumber+1)) == 0)) {
									System.out.println(cf.markTupleDeleted(tid));
								}
								break;

							}

						}		
					}
					System.out.println("Total records marked as deleted: " + cf.deleteCount);
				}

				catch (Exception e){
					e.printStackTrace();
				}

				break;

			case "BITMAP":
				String val = valueConstraint.get(2);
				String file_entry_name = columnFileName+ Integer.toString(columnNumber)+val;
				BM b = new BM();
				BitMapFile B = new BitMapFile(file_entry_name);
				int[] positions = BM.getpositions(B.getHeaderPage());
				int size = BM.getCount();
				int i =0;
				int c=0;
				while ((t=ts.getNext(tid))!=null) {
					if(c<positions[i])
						c++;
					else {
						System.out.println(cf.markTupleDeleted(tid));
						c++;
						i++;
					}

					if(i==size){
						break;
					}
				}
				System.out.println(cf.deleteCount);

				B.destroyFile();

				//String columnName = getColumnName(columnNumber); 

				System.out.println("Reindexing...........");

				//for (String colName : bitmapIndex) {

				//					System.out.println(colName);

				//}

				for (String colName : bitmapIndex) {

					DestroyBitmap(cf, columnDBName, columnFileName, colName, "BITMAP");

				}

				for (String colName : bitmapIndex) {

					indexQueryBitmap(cf, columnDBName, columnFileName, colName, "BITMAP");

				}

				break;




			case "BTREE":

				BTreeFile btf = null;
				BTFileScan scan = null;

				String indexColumn = valueConstraint.get(0);
				Heapfile reqHFile=cf.getHeapfileForColumname(indexColumn);
				//int columnNumber = cf.getColumnNumberFromColumname(columnFileName);



				btf = new BTreeFile("btree"+indexColumn, AttrType.attrInteger, 4, 1);

				if(type == 1) {						
					if (operator == '<') {
						hikeyInt= Integer.parseInt(valueConstraint.get(2));
						lowkeyInt = 0;
					} else {
						lowkeyInt= Integer.parseInt(valueConstraint.get(2));
						hikeyInt = 999999;
					}						
					IntegerKey lowkey=new IntegerKey(lowkeyInt);
					IntegerKey hikey=new IntegerKey(hikeyInt);
					scan= btf.new_scan(lowkey, hikey);
				} else {	
					if (operator == '<') {
						highKeyStr = valueConstraint.get(2);
						lowkeyStr = "a";
					} else {
						lowkeyStr = valueConstraint.get(2);
						highKeyStr = "zzzzzzzz";
					}						

					StringKey lowKey = new StringKey(lowkeyStr);
					StringKey highKey = new StringKey(highKeyStr);
					scan= btf.new_scan(lowKey, highKey);					
				}

				KeyDataEntry entry;
				RID rid=new RID();

				try 
				{	

					//BT.printBTree(btf.getHeaderPage());
					//System.out.println("printing leaf pages...");
					//BT.printAllLeafPages(btf.getHeaderPage());

					while((entry=scan.get_next())!=null) {
						if(entry!=null) {
							switch(operator)
							{
							case '>':
								if(entry.key instanceof IntegerKey) {
									if(((IntegerKey)entry.key).getKey() > lowkeyInt) {
										rid=((btree.LeafData)entry.data).getData();
										int position=reqHFile.RidToPos(rid);										
										tid = getDeleteTID(cf, position);
										cf.markTupleDeleted(tid);
										/*for(int j=0;j<targetsize;j++) {
											targetColNo = getColumnNumber(columnNames.get(j))-1;
											System.out.print(result.get(targetColNo) + " ");
										}
										System.out.println();*/
									}
								}

								else {
									if(((StringKey)entry.key).getKey().compareTo(lowkeyStr)>0){
										rid=((btree.LeafData)entry.data).getData();
										int position=reqHFile.RidToPos(rid);										
										tid = getDeleteTID(cf, position);
										cf.markTupleDeleted(tid);
										/*for(int j=0;j<targetsize;j++) {
											targetColNo = getColumnNumber(columnNames.get(j))-1;
											System.out.print(result.get(targetColNo) + " ");
										}
										System.out.println();*/
									}
								}								
								break;
							case '<':
								if(entry.key instanceof IntegerKey)	{
									if(((IntegerKey)entry.key).getKey() < hikeyInt){
										rid=((btree.LeafData)entry.data).getData();
										int position=reqHFile.RidToPos(rid);										
										tid = getDeleteTID(cf, position);
										cf.markTupleDeleted(tid);
										/*for(int j=0;j<targetsize;j++) {
											targetColNo = getColumnNumber(columnNames.get(j))-1;
											System.out.print(result.get(targetColNo) + " ");
										}
										System.out.println();*/
									}
								}
								else {
									if(((StringKey)entry.key).getKey().compareTo(lowkeyStr)<0){
										rid=((btree.LeafData)entry.data).getData();
										int position=reqHFile.RidToPos(rid);										
										tid = getDeleteTID(cf, position);
										cf.markTupleDeleted(tid);
										/*for(int j=0;j<targetsize;j++) {
											targetColNo = getColumnNumber(columnNames.get(j))-1;
											System.out.print(result.get(targetColNo) + " ");
										}
										System.out.println();*/
									}
								}
								break;

							case '=':
								if(entry.key instanceof IntegerKey) {
									if(((IntegerKey)entry.key).getKey() == lowkeyInt){
										rid=((btree.LeafData)entry.data).getData();
										int position=reqHFile.RidToPos(rid);										
										tid = getDeleteTID(cf, position);
										cf.markTupleDeleted(tid);
										/*for(int j=0;j<targetsize;j++) {
											targetColNo = getColumnNumber(columnNames.get(j))-1;
											System.out.print(result.get(targetColNo) + " ");
										}
										System.out.println();*/
									}
								}
								else {
									if(((StringKey)entry.key).getKey().compareTo(lowkeyStr)==0){
										rid=((btree.LeafData)entry.data).getData();
										int position=reqHFile.RidToPos(rid);										
										tid = getDeleteTID(cf, position);
										cf.markTupleDeleted(tid);
										/*for(int j=0;j<targetsize;j++) {
											targetColNo = getColumnNumber(columnNames.get(j))-1;
											System.out.print(result.get(targetColNo) + " ");
										}
										System.out.println();*/
									}
								}
								break;
							}
						}
					}
					System.out.println("");
					//System.out.println("Disk Reads"+ (pcounter.rcounter - startRead));
					//System.out.println("Disk Writes"+ (pcounter.wcounter - startWrite));
				} catch (Exception e) 
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}


				break;

			case "COLUMNSCAN":
				ColumnarFile columnarFile = cf;
				int numOfColumns = columnarFile.numberOfColumns;
				AttrType[] types = columnarFile.attributeType;

				AttrType[] attrs = new AttrType[1];
				columnNumber = getColumnNumber(valueConstraint.get(0)) - 1;
				attrs[0] = types[columnNumber];

				FldSpec[] projlist = new FldSpec[1];
				RelSpec rel = new RelSpec(RelSpec.outer);
				projlist[0] = new FldSpec(rel, 1);

				String filename = columnFileName + String.valueOf(columnNumber);
				List<TID> tids = new ArrayList<>();
				short[] strSize = new short[numOfColumns];
				int j = 0;
				for (i = 0; i < numOfColumns; i++) {
					if (types[i].attrType == AttrType.attrString) {
						strSize[j] = (short) 100;
						j++;
					}
				}
				short[] strSizes = Arrays.copyOfRange(strSize, 0, j);

				CondExpr[] expr = getValueContraint(valueConstraint);
				List<String> columnNames = new ArrayList<>();
				columnNames.add("A");
				columnNames.add("B");
				columnNames.add("C");
				columnNames.add("D");
				int selectedCols[] = new int[columnNames.size()];
				for (i = 0; i < columnNames.size(); i++) {
					selectedCols[i] = getColumnNumber(columnNames.get(i));
				}
				//int startread = PCounter.rcounter;
				//int startwrite = PCounter.wcounter;
				try {

					ColumnarFileScan columnarFileScan = new ColumnarFileScan(columnFileName, filename, attrs,
							strSizes, (short) 1, 1, selectedCols, projlist, expr, false, cf);
					while (true) {
						tid = columnarFileScan.get_all_rid_as_tid();
						if (tid == null) {
							break;
						}
						tids.add(tid);
					}
					columnarFileScan.close();
					for(TID tid1: tids) System.out.println(cf.markTupleDeleted(tid1));

				} catch (Exception e) {
					e.printStackTrace();
				}

				//System.out.println("Number of disk reads: " + (PCounter.rcounter-startread));
				//System.out.println("Number of disk writes: " + (PCounter.wcounter-startwrite));

				break;
			}

			System.out.println("Deleted Records");
			System.out.println();
			//cf.showDeleteDump();

			System.out.println("Purge all (true/false)?");
			boolean isPurge = Boolean.parseBoolean(scanner.next());

			if (isPurge) {
				System.out.println("Purging all the deleted records");
				cf.purgeAllDeletedTuples();
				//cf.showDeleteDump();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static List<String> getResult(ColumnarFile cf, int position) throws InvalidSlotNumberException, HFException, HFDiskMgrException, HFBufMgrException, Exception
	{
		int colSize = cf.columnNames.length;
		ArrayList<Tuple> arrTuples=new ArrayList<Tuple>();
		RID rid = new RID();
		Heapfile hf;

		Tuple tuple = new Tuple();
		short[] fieldOffset = {0,(short)cf.stringSize,(short)(2*cf.stringSize),(short)(2*cf.stringSize+4)};
		tuple.setTupleMetaData(cf.tupleLength, (short)cf.numberOfColumns, fieldOffset);

		List<String> result = new ArrayList<String>();
		int val;
		String sval;

		TID tid=new TID(colSize);
		tid.recordIDs=new RID[colSize];
		tid.position=position;
		tid.numRIDs=colSize;
		for(int j=0;j<colSize;j++)
			tid.recordIDs[j]=new RID();
		for (int i = 0 ; i < colSize ; i++)
		{
			hf = cf.getHeapfileForColumname(cf.columnNames[i].toString());
			rid = hf.PosToRid(position);
			tuple = hf.getRecord(rid);
			tid.recordIDs[i]=rid;
			if(tuple.getLength()>4)	{
				sval = Convert.getStrValue(0, tuple.getData(), tuple.getLength());
				result.add(sval);
			}
			else {
				val = Convert.getIntValue(0, tuple.getData());
				result.add(Integer.toString(val));
			}

			arrTuples.add(hf.getRecord(rid));
		}
		return result;
	}

	public static TID getDeleteTID(ColumnarFile cf, int position) throws InvalidSlotNumberException, HFException, HFDiskMgrException, HFBufMgrException, Exception
	{
		int colSize = cf.columnNames.length;
		ArrayList<Tuple> arrTuples=new ArrayList<Tuple>();
		RID rid = new RID();
		Heapfile hf;
		Tuple t = new Tuple();

		TID tid=new TID(colSize);
		tid.recordIDs=new RID[colSize];
		tid.position=position;
		tid.numRIDs=colSize;
		for(int j=0;j<colSize;j++)
			tid.recordIDs[j]=new RID();

		System.out.print("[");
		for (int i = 0 ; i < colSize ; i++)
		{
			hf = cf.getHeapfileForColumname(cf.columnNames[i].toString());
			rid = hf.PosToRid(position);
			t = hf.getRecord(rid);
			short[] fieldOffset = {0,(short)cf.stringSize,(short)(2*cf.stringSize),(short)(2*cf.stringSize+4)};
			t.setTupleMetaData(cf.tupleLength, (short)cf.numberOfColumns, fieldOffset);

			tid.recordIDs[i]=rid;
			if(t.getData().length>4)
				System.out.print(Convert.getStrValue(0, t.getData(), t.getData().length)+", ");
			else
				System.out.print(Convert.getIntValue(0, t.getData())+", ");
			arrTuples.add(hf.getRecord(rid));
		}
		System.out.println("]");
		return tid;
	}


	public static int getColumnNumber(String columnName){

		int column = 1;
		switch(columnName){
		case "A":
			column = 1;
			break;

		case "B":
			column = 2;
			break;

		case "C":
			column = 3;
			break;

		case "D":
			column = 4;
			break;
		}
		return column;
	}

	public static int getOp(String op){

		if(op == "=")
			return AttrOperator.aopEQ;
		else if(op == "<")
			return AttrOperator.aopLT;
		else if(op == ">")
			return AttrOperator.aopGT;
		else if(op == "!=")
			return AttrOperator.aopNE;
		else if(op == ">=")
			return AttrOperator.aopGE;
		else
			return AttrOperator.aopLE;
	}

	public static CondExpr[] getValueContraint(List<String> valueContraint){
		if(valueContraint.isEmpty())
			return null;

		int operator = getOp(valueContraint.get(1));
		int column = getColumnNumber(valueContraint.get(0));

		CondExpr[] expr = new CondExpr[2];
		expr[0] = new CondExpr();
		expr[0].op = new AttrOperator(operator);
		expr[0].type1 = new AttrType(AttrType.attrSymbol);
		expr[0].operand1.symbol = new FldSpec(new RelSpec(RelSpec.outer), column);
		expr[0].next = null;

		String value = valueContraint.get(2);
		if (value.matches("\\d*\\.?\\d*")) {
			expr[0].type2 = new AttrType(AttrType.attrReal);
			expr[0].operand2.real = Float.valueOf(value);
		}
		else if(value.matches("\\d+")){
			expr[0].type2 = new AttrType(AttrType.attrInteger);
			expr[0].operand2.integer = Integer.valueOf(value);
		}
		else{
			expr[0].type2 = new AttrType(AttrType.attrString);
			expr[0].operand2.string = value;
		}
		expr[1] = null;
		return expr;
	}

	public static void DestroyBitmap(ColumnarFile cf, String columnDbName, 

			String columnarFileName, String columnName, String indexType) {


		BitMapFile B = null; 


		String[] columnNames;

		String file_entry_name;


		ColumnarFileMetadata cfm = cf.getColumnarFileMetadata(columnarFileName+".hdr");

		columnNames = cfm.columnNames;

		cf.columnNames = columnNames;


		int startread, startwrite;

		startread = PCounter.rcounter;

		startwrite = PCounter.wcounter;


		Heapfile hf = cf.getHeapfileForColumname(columnName);


		if(indexType.equalsIgnoreCase("BITMAP")) {

			try {

				int value;

				String str;

				RID rid = new RID();

				Scan s = hf.openScan();

				Tuple tuple=null;

				System.out.println("Deleting BitMap on column: "+columnName);

				int ColNo = cf.getColumnNumberFromColumname(columnName);

				AttrType x = cf.attributeType[ColNo];	


				HashSet<Integer> intHash = new HashSet<>();

				HashSet<String> strHash = new HashSet<>();


				while((tuple=s.getNext(rid))!=null){


					if(x.attrType == AttrType.attrInteger) {

						value = Convert.getIntValue(0, tuple.getData());


						if (!intHash.contains(value)) {

							IntegerValue val = new IntegerValue();

							val.setValue(value);

							intHash.add(value);

							file_entry_name= columnarFileName+Integer.toString(ColNo)+Integer.toString(value);

							//System.out.println(file_entry_name);

							System.out.println("Deleting index on: " + value);

							B = new BitMapFile(file_entry_name);

							B.destroyFile();

							//BM.printBitMap(B.getHeaderPage());

						}


					}	

					else if(x.attrType == AttrType.attrString)	{

						str = Convert.getStrValue(0, tuple.getData(),cf.stringSize );					 


						if (!strHash.contains(str)) {

							StringValue vals = new StringValue();

							vals.setValue(str);

							strHash.add(str);

							file_entry_name= columnarFileName+Integer.toString(ColNo)+str;

							//System.out.println(file_entry_name);

							System.out.println("Deleting index on: " + str);

							B = new BitMapFile(file_entry_name);

							B.destroyFile();

							//BM.printBitMap(B.getHeaderPage());

						}

					}


				}

			} catch (Exception e) {

				// TODO: handle exception

			}


			//System.out.println("Number of disk reads: " + (PCounter.rcounter-startread));

			//System.out.println("Number of disk writes: " + (PCounter.wcounter-startwrite));

		}


	}

	//return columnname from given column number

	public static String getColumnName(int columnNum){


		String columnname = "A";

		switch(columnNum){

		case 0:

			columnname = "A";

			break;


		case 1:

			columnname = "B";

			break;


		case 2:

			columnname = "C";

			break;


		case 3:

			columnname = "D";

			break;

		}
		return columnname;

	}

}
